{"name":"AndroidSVG","tagline":"SVG rendering library for Android","body":"# AndroidSVG\r\n\r\nAndroidSVG is a SVG parser and renderer for Android.  It has almost complete support for the static\r\nvisual elements of the SVG 1.1 and SVG 1.2 Tiny specifications (except for filters).  AndroidSVG\r\ncorrectly renders the [SVG Acid Test](http://www.codedread.com/acid/acid1.html).\r\n\r\n*AndroidSVG is licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0)*.\r\n\r\n<a href=\"https://twitter.com/AndroidSVG\"><img src=\"http://i.imgur.com/gSGIbYP.png\"/></a>\r\n\r\n## Downloads\r\n\r\nThe [current release (v1.2.1)](https://bitbucket.org/paullebeau/androidsvg/downloads) is hosted at Bitbucket.\r\n\r\nCheck the [Release Notes](https://code.google.com/p/androidsvg/wiki/ReleaseNotes) to find out what's in the latest release.\r\n\r\nOlder releases can be found on this site's [ downloads page](https://code.google.com/p/androidsvg/downloads/list?can=1&q=&colspec=Filename+Summary+Uploaded+ReleaseDate+Size+DownloadCount).\r\n\r\n## Editor support\r\n\r\nA design goal of this project is to correctly render SVG files that have been exported from the\r\nmost popular vector editors. AndroidSVG has been tested with files generated by Adobe Illustrator,\r\nInkscape, Xara and Corel Draw.\r\n\r\n![SVG Acid Test](http://i.imgur.com/ZaOi6rO.png)\r\n![Xara Blue car](http://i.imgur.com/og8xnr6.png)\r\n\r\n## How do I use AndroidSVG?\r\n\r\nDownload the latest release from the [download page](https://bitbucket.org/paullebeau/androidsvg/downloads)\r\nand add it to your project.  If you are using Eclipse, you can drag the library to the `libs` folder for\r\nyour project in the Package Explorer.\r\n\r\nFor those building with Maven, AndroidSVG releases are also avaliable in the [Maven Central Repository](http://search.maven.org/#search|gav|1|g%3A%22com.caverock%22%20AND%20a%3A%22androidsvg%22).\r\nTo include AndroidSVG in your project, add the following dependency to your POM file.\r\n\r\n```\r\n<dependency>\r\n  <groupId>com.caverock</groupId>\r\n  <artifactId>androidsvg</artifactId>\r\n  <version>1.2.1</version>\r\n</dependency>\r\n```\r\n\r\n## API Introduction\r\n\r\nAll interaction with AndroidSVG is via the `SVG` class.\r\n\r\nTypically, you will call one of the SVG loading and parsing classes then call the renderer, passing it a canvas to draw upon.\r\n \r\n* Use one of the static `SVG.getFromX()` methods to read and parse the SVG file.  They will return an instance\r\n  of the `SVG` class.\r\n* Then to render, you can either call `renderToPicture()` to get an Android `Picture` instance, or call\r\n  `renderToCanvas()` to render directly to a Canvas.\r\n\r\nFor more information, see the [Documentation](https://code.google.com/p/androidsvg/wiki/Documentation) or\r\nread the [Javadoc](https://androidsvg.googlecode.com/hg/doc/index.html).\r\n\r\n## Usage example\r\n\r\n[Download the latest version](https://bitbucket.org/paullebeau/androidsvg/downloads) and copy it to your `libs` folder\r\nin Eclipse.  Then in your app, you can do something like the following.\r\n\r\n```java\r\n  // Read an SVG from the assets folder\r\n  SVG  svg = SVG.getFromAsset(getContext().getAssets(), filename);\r\n  // Create a canvas to draw onto\r\n  if (svg.getDocumentWidth() != -1) {\r\n     Bitmap  newBM = Bitmap.createBitmap(Math.ceil(svg.getDocumentWidth()),\r\n                                         Math.ceil(svg.getDocumentHeight()),\r\n                                         Bitmap.Config.ARGB_8888);\r\n     Canvas  bmcanvas = new Canvas(newBM);\r\n     // Clear background to white\r\n     bmcanvas.drawRGB(255, 255, 255);\r\n     // Render our document onto our canvas\r\n     svg.renderToCanvas(bmcanvas);\r\n  }\r\n```\r\n\r\nIf you just want to use an SVG icon in your layout, you can use the supplied\r\n[SVGImageView](https://code.google.com/p/androidsvg/wiki/SVGImageView) custom view class.\r\n\r\n## What features of SVG are supported?\r\n\r\nAndroidSVG supports the following SVG elements:\r\n\r\n### Fully supported\r\n\r\n`<circle> <clipPath> <defs> <desc> <ellipse> <g> <line> <linearGradient> <marker> <mask> <path> <polygon> <polyline> <rect> <solidColor> <stop> <svg> <switch> <symbol> <title> <use> <view>`.\r\n\r\n### Supported with some limitations\r\n\r\n`<image> <text> <textPath> <tref> <tspan> <pattern> <radialGradient> <style>`\r\n\r\n### Not supported at all\r\n\r\n* Animation is not supported.\r\n* Filters are not supported.\r\n\r\nFor more information on what elements, attributes and properties are supported, see the\r\n[https://code.google.com/p/androidsvg/wiki/SVGImplementationDetails](SVGImplementationDetails SVG Implementations Details) page.\r\n\r\n### Find a bug?\r\n\r\nPlease file an [bug report](https://github.com/BigBadaboom/androidsvg/issues) and include as much detail as you can.\r\nIf possible, please include a sample SVG file showing the error.\r\n\r\nIf you wish to contact the author with feedback on this project, you can email me at\r\n[androidsvgfeedback@gmail.com](mailto:androidsvgfeedback@gmail.com).\r\n\r\nIf you have found AndroidSVG useful and use it in your project, please let me know. I'd love to hear about it!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}